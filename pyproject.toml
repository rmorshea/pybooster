
[tool.uv]
default-groups = ["all"]
cache-keys = [{ file = "pyproject.toml" }, { git = true }]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pybooster"
version = "0.0.4"
description = "Dependency injection without the boilerplate."
readme = "README.md"
requires-python = ">=3.11,<4"
license = { file = "LICENSE.txt" }
keywords = ["dependency", "injection", "framework"]
authors = [{ name = "Ryan Morshead", email = "ryan.morshead@gmail.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "typing_extensions",
    "paramorator>=1.0.2,<2",
    "rustworkx>=0.15,<0.16",
]
[project.optional-dependencies]
sqlalchemy = ["sqlalchemy[asyncio]>=2,<3"]

[project.urls]
Source = "https://github.com/rmorshea/pybooster"
Documentation = "https://ryanmorshead.com/pybooster"

[dependency-groups]
all = [
    { include-group = "dev" },
    { include-group = "docs" },
    { include-group = "lint" },
    { include-group = "test" },
]
dev = ["click==8.1.7"]
docs = [
    { include-group = "test" },
    "mkdocs-gen-files==0.5.0",
    "mkdocs-material==9.5.39",
    "mkdocs-open-in-new-tab==1.0.5",
    "mkdocs==1.6.1",
    "mkdocstrings-python==1.11.1",
]
lint = [
    { include-group = "test" },
    "mdformat-admon @ git+https://github.com/rmorshea/mdformat-admon.git@0e513d7a2c265faf74441938ccbd1010660609f4",
    "mdformat-mkdocs==3.1.1",
    "mdformat-pyproject==0.0.1",
    "mdformat-tables==1.0.0",
    "mdformat==0.7.19",
    "pyright==1.1.389",
    "ruff==0.8.1",
    "yamlfix==1.17.0",
    "doccmd==2024.11.14",
]
test = [
    { include-group = "dev" },
    "aiosqlite==0.20.0",
    "boto3-stubs[essential]==1.35.49",
    "boto3==1.35.49",
    "coverage[toml]==7.6.1",
    "diff-cover==9.2.0",
    "moto==5.0.16",
    "pycobertura==3.3.2",
    "pytest-asyncio==0.24.0",
    "pytest-examples==0.0.13",
    "pytest==8.3.3",
    "sqlalchemy[asyncio]==2.0.36",
    "starlette[full]==0.39.2",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
line-length = 100

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 80
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "A005",   # Module shadowing built-in
    "ANN",    # Let pyright handle annotations
    "ANN401", # Allow Any type hints
    "ARG005", # Unused lambda argument
    "B027",   # Allow non-abstract empty methods in abstract base classes
    "B039",   # Mutable default for contextvars
    "C901",   # Ignore complexity
    "COM812", # Trailing comma
    "CPY001", # Copyright at top of file
    "D100",   # Docstring for module
    "D104",   # Ignore missing docstring for __init__.py
    "D105",   # Docstring for magic method
    "D107",   # Docstring for __init__ method
    "D203",   # One blank line before class
    "D213",   # Multi-line docstring summary second line
    "D407",   # Docstring dashes under section names
    "D413",   # Docstring blank line after last section
    "DOC201", # Return type documentation
    "DOC402", # Yield type documentation
    "DOC501", # Ignore raises missing from docstring
    "ERA001", # Commented out code
    "FBT003", # Allow boolean positional values in function calls, like `dict.get(... True)`
    "PL",     # PyLint
    "PYI",    # Stub files
    "RET503", # Explicit return
    "RET505", # Unnecessary return statement after return
    "S105",   # Ignore checks for possible passwords
    "SIM117", # Use a single `with` statement
    "ISC001", # implicitly concatenated strings on a single line
]
unfixable = [
    "COM819", # Trailing comma
]
fixable = ["ALL"]

extend-safe-fixes = ["TCH"]

[tool.ruff.lint.isort]
known-first-party = ["pybooster"]
force-single-line = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "PLC2701", # Private imports
    "RUF029",  # Async functions without await
    "S101",    # Assert statements
    "D",       # Docstrings
    "ANN",     # Type annotations
]
"**.ipynb" = [
    "T201", # Print statements
]
"doccmd_*.py" = [
    "ANN",    # Type annotations
    "B018",   # Useless expression
    "D",      # Docstrings
    "EM101",  # Assign error message to string
    "FA102",  # Unsafe __futures__ annotations usage
    "INP001", # Implicit namespace package
    "RUF029", # No await in async function
    "S101",   # Assert statements
    "S106",   # Possible passwords
    "SIM115", # Use context manager for opening files
    "T201",   # Print
    "TC001",  # Move first-party import into a type-checking block
    "TC002",  # Move third-party import into a type-checking block
    "TC003",  # Move standard-libarary import into a type-checking block
    "TRY003", # Avoid specifying long messages outside the exception class
]


[tool.yamlfix]
line_length = 100

[tool.coverage.run]
source_pkgs = ["pybooster", "tests"]
branch = true
omit = []

[tool.coverage.paths]
pybooster = ["src"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
    'if __name__ == .__main__.:',
    "@overload",
    "if TYPE_CHECKING:",
    "# nocov",
    "raise AssertionError",
    "raise NotImplementedError",
    'class .*\bProtocol\b.*\):',
]
show_missing = true
skip_covered = true
sort = "Name"

[tool.diff_cover]
compare_branch = "origin/main"
fail_under = 100
include_untracked = true
