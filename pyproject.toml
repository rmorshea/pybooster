[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pybooster"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.10,<4"
license = "MIT"
keywords = []
authors = [{ name = "Ryan Morshead", email = "ryan.morshead@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["typing_extensions", "paramorator>=1.0.2,<2"]

[project.optional-dependencies]
asgi = ["asgiref>=3.8.1,<4", "anyio>=4.6.0,<5"]
sqlalchemy = ["sqlalchemy[asyncio]>=2.0.35,<3"]

[project.urls]
Documentation = "https://github.com/rmorshea/pybooster#readme"
Issues = "https://github.com/rmorshea/pybooster/issues"
Source = "https://github.com/rmorshea/pybooster"

[tool.hatch.version]
path = "src/pybooster/__init__.py"

[tool.hatch.envs.default]
dependencies = [
  "aiosqlite==0.20.0",
  "boto3-stubs[essential]==1.35.38",
  "boto3==1.35.38",
  "coverage[toml]==7.6.1",
  "diff-cover==9.2.0",
  "moto==5.0.16",
  "pytest-asyncio==0.24.0",
  "pytest-examples==0.0.13",
  "pytest==8.3.3",
  "toml==0.10.2",                    # python 3.10 compatibility
]
[tool.hatch.envs.default.scripts]
test = "pytest -v {args:tests}"
cov-test = ["coverage run -m pytest -v {args:tests}"]
cov-report = [
  "- coverage combine",
  "coverage report",
  "coverage xml",
  "diff-cover coverage.xml --config-file pyproject.toml",
]
cov = ["cov-test", "cov-report"]

[tool.hatch.envs.lint]
python = "3.12"
extra-dependencies = ["black==24.8.0", "pyright==1.1.377", "ruff==0.5.7"]
[tool.hatch.envs.lint.scripts]
typing = "pyright {args:src/pybooster tests}"
style = ["ruff check {args:.}", "black --check --diff {args:.}"]
fix = ["black {args:.}", "ruff check --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.hatch.envs.docs]
extra-dependencies = [
  "mkdocs-material==9.5.39",
  "mkdocs-open-in-new-tab==1.0.5",
  "mkdocs==1.6.1",
  "mkdocstrings-python==1.11.1",
]
[tool.hatch.envs.docs.scripts]
build = "mkdocs build -f docs/mkdocs.yml"
publish = "mkdocs gh-deploy -f docs/mkdocs.yml"
fix = "pytest tests/test_docs.py --update-examples"
serve = "mkdocs serve -f docs/mkdocs.yml"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.black]
preview = true
target-version = ["py39"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
  "A005",   # Module shadowing built-in
  "ANN",    # Let pyright handle annotations
  "ANN401", # Allow Any type hints
  "ARG005", # Unused lambda argument
  "B027",   # Allow non-abstract empty methods in abstract base classes
  "B039",   # Mutable default for contextvars
  "C901",   # Ignore complexity
  "COM812", # Trailing comma
  "CPY001", # Copyright at top of file
  "D100",   # Docstring for module
  "D104",   # Ignore missing docstring for __init__.py
  "D105",   # Docstring for magic method
  "D107",   # Docstring for __init__ method
  "D407",   # Docstring dashes under section names
  "D413",   # Docstring blank line after last section
  "DOC201", # Return type documentation
  "DOC402", # Yield type documentation
  "DOC501", # Ignore raises missing from docstring
  "ERA001", # Commented out code
  "FBT003", # Allow boolean positional values in function calls, like `dict.get(... True)`
  "PL",     # PyLint
  "PYI",    # Stub files
  "RET503", # Explicit return
  "RET505", # Unnecessary return statement after return
  "S105",   # Ignore checks for possible passwords
  "SIM117", # Use a single `with` statement
]
unfixable = [
  "COM819", # Trailing comma
]
fixable = ["ALL"]

extend-safe-fixes = ["TCH"]

[tool.ruff.lint.isort]
known-first-party = ["pybooster"]
force-single-line = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
  "PLC2701", # Private imports
  "RUF029",  # Async functions without await
  "S101",    # Assert statements
  "D",       # Docstrings
  "ANN",     # Type annotations
]
"**.ipynb" = [
  "T201", # Print statements
]
"**.md" = [
  "D",      # Docstrings
  "ANN",    # Type annotations
  "S101",   # Assert statements
  "S106",   # Possible passwords
  "FA102",  # Unsafe __futures__ annotations usage
  "SIM115", # Use context manager for opening files
  "RUF029", # No await in async function
  "TCH002", # Move third-party import into a type-checking block
]

[tool.coverage.run]
source_pkgs = ["pybooster", "tests"]
branch = true
parallel = true
omit = []

[tool.coverage.paths]
pybooster = ["src/pybooster"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no ?cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  '\.\.\.',
]
show_missing = true
skip_covered = true
sort = "Name"

[tool.diff_cover]
compare_branch = "origin/main"
fail_under = 100
